<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on Negentropy</title>
    <link>https://chengyayu.github.io/categories/refactoring/</link>
    <description>Recent content in Refactoring on Negentropy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 19 Nov 2020 01:08:43 +0800</lastBuildDate><atom:link href="https://chengyayu.github.io/categories/refactoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>低层级重构基本手法</title>
      <link>https://chengyayu.github.io/posts/%E4%BD%8E%E5%B1%82%E7%BA%A7%E9%87%8D%E6%9E%84%E5%9F%BA%E6%9C%AC%E6%89%8B%E6%B3%95/</link>
      <pubDate>Thu, 19 Nov 2020 01:08:43 +0800</pubDate>
      
      <guid>https://chengyayu.github.io/posts/%E4%BD%8E%E5%B1%82%E7%BA%A7%E9%87%8D%E6%9E%84%E5%9F%BA%E6%9C%AC%E6%89%8B%E6%B3%95/</guid>
      <description>什么是好代码的特征 评价代码好坏，如同审美，不仅关乎个人品味，而且存在客观标准。 好的代码直接了当，如果需要被修改，能让“修理工”轻易找到修改点，并且快速做出更改，同时不易引入其他错误。 检验标准可以归纳成 ETC（Easy To Change）原则，就是人们是否能轻而易举地修改它。
遗憾的是，我们面对不断变化的业务需求很难一步到位。只能快速实现，时时修缮，以期达到小步快跑的节奏感。
何为重构 在不改变软件可观察行为的前提下，调整其结构。使之无限接近 ETC。
何时重构 预备性重构：添加新功能很费劲 帮助理解的重构：代码看不懂 捡垃圾式重构：代码能看懂，但是烂 长期重构：每次改一点，就算改个名字也是好的 不重构：不需要理解则不必重构 重构的挑战 延缓新功能开发 遗留代码 代码所有权* 测试* 独立系统（数据库）* 尺度大一点
是不是不需要做架构了？ 无限增加可读性会不会影响性能？ 代码坏味道 1 神秘命名
2 重复代码
3 过长函数
4 过长参数列表
5 全局数据
特征：数据不符合预期的被改变，又找不到变动源头 原因： 不可变：相对安全 可变：作用域范围越大，被影响的概率越大，越难以探测影响源 改进： 封装到一个结构中，提供可以修改其值的方法 6 可变数据
特征：一个变量拥有不同的语义 原因： 副作用 改进： 将一个（多功能）变量拆分成多个功能单一的变量 将没有副作用的代码和没有副作用的代码拆分开 函数式编程：如果要更新一个数据结构，就返回一份新的数据副本 7 发散式变化
特征：某个模块需经常因为不同的原因在不同的方向上发生变化 原因：随着软件功能越来越多，上下文边界变得不够清晰 改进： 如果有明显先后次序，拆分阶段 如果两个方向有更多来回调用，将拆分出两个独立的模块 8 霰弹式修改
特征：如果遇到某种变化，都必须在许多不同的结构内做出许多小修改 原因：模块拆分不合适 改进：先内联到一个大模块，再重新拆分 9 依恋情结
特征： 一个函数跟另一个模块的函数或者数据格外频繁，远胜于在自己所处模块内部的交流 某个函数为了计算某个值，从另外一个对象那儿调用几乎半打的取值函数。 改进：将函数提炼出来搬到那个对象里去 10 数据泥团</description>
    </item>
    
  </channel>
</rss>

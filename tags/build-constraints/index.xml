<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>build constraints on Negentropy</title>
    <link>https://chengyayu.github.io/tags/build-constraints/</link>
    <description>Recent content in build constraints on Negentropy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 19 Aug 2022 16:35:05 +0800</lastBuildDate><atom:link href="https://chengyayu.github.io/tags/build-constraints/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>构建约束</title>
      <link>https://chengyayu.github.io/posts/build-constraints/</link>
      <pubDate>Fri, 19 Aug 2022 16:35:05 +0800</pubDate>
      
      <guid>https://chengyayu.github.io/posts/build-constraints/</guid>
      <description>//go:build go1.17 || (linux &amp;amp;&amp;amp; 386) || (darwin &amp;amp;&amp;amp; !cgo) 01 什么是构建约束？ 构建约束（build constraint）也叫做构建标记（build tag），以文件名或注释形式，标记当前文件是否参与构建过程。
文件名形式的构建约束比较简单，暂且按下不表。Go 中一直存在一种 // +build 形式的构建约束语法，标记间的组合关系通过空格、逗号或多行来表示，例如：
// +build go1.17 linux,386 darwin,!cgo 这种语法示意性非常差！哪怕是下面这种多行形式，也并没有多少改善。
// +build go1.17 // +build linux,386 // +build darwin,!cgo 而 go1.17 引入的新语法示意性就非常棒了。上面的约束用新语法表示成:
//go:build go1.17 || (linux &amp;amp;&amp;amp; 386) || (darwin &amp;amp;&amp;amp; !cgo) 新的约束语法可以理解为，标签表达式为真，当前文件参与构建。
02 如何使用构建约束？ 文件名形式 文件名按照以下模式构成构建约束：
*_GOOS *_GOARCH *_GOOS_GOARCH 例如 source_windows_amd64.go 只会在 windows 中 amd64 架构下参与构建。
想要知道 GOOS 与 GOARCH 所有可选项，可通过 go tool dist list 查看。</description>
    </item>
    
  </channel>
</rss>
